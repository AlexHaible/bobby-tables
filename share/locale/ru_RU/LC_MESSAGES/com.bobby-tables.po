# Russian localization file for bobby-tables.com
# Copyright (C) 2008-2012 Andy Lester <andy@petdance.com>
# This site's content is available under the Creative Commons Attribution-ShareAlike 3.0 License.
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: YEAR-MO-DA HO:MI+ZONE\n"
"PO-Revision-Date: 2012-05-01 07:25-0600\n"
"Last-Translator: Andy Lester <andy@petdance.com>\n"
"Language-Team: Russian\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

#: crank.pl:30
msgid "Home"
msgstr ""

#: crank.pl:31
msgid "Translations"
msgstr ""

#: crank.pl:32
msgid "About"
msgstr ""

#: s/about.md.tt2:1
msgid "# About Bobby Tables and SQL injection"
msgstr ""

#: s/about.md.tt2:3
msgid "# Why did Bobby's school lose their records?"
msgstr ""

#: s/about.md.tt2:5
msgid ""
"The school apparently stores the names of their students in a table called "
"Students. When a new student arrives, the school inserts his/her name into "
"this table. The code doing the insertion might look as follows:"
msgstr ""

#: s/about.md.tt2:7
msgid ""
"    $sql = \"INSERT INTO Students (Name) VALUES ('\" . $studentName . \"');"
"\";\n"
"    execute_sql($sql);"
msgstr ""

#: s/about.md.tt2:10
msgid ""
"The first line creates a string containing an SQL INSERT statement. The "
"content of the `$studentName` variable is glued into the SQL statement. The "
"second line sends the resulting SQL statement to the database. The pitfall "
"of this code is that outside data, in this case the content of `"
"$studentName`, becomes part of the SQL statement."
msgstr ""

#: s/about.md.tt2:12
msgid ""
"First let's see what the SQL statement looks like if we insert a student "
"named John:"
msgstr ""

#: s/about.md.tt2:14
msgid "    INSERT INTO Students (Name) VALUES ('John');"
msgstr ""

#: s/about.md.tt2:16
msgid ""
"This does exactly what we want: it inserts John into the Students table."
msgstr ""

#: s/about.md.tt2:18
msgid ""
"Now we insert little Bobby Tables, by setting `$studentName` to `Robert'); "
"DROP TABLE Students;--`. The SQL statement becomes:"
msgstr ""

#: s/about.md.tt2:20
msgid ""
"    INSERT INTO Students (Name) VALUES ('Robert'); DROP TABLE Students;--');"
msgstr ""

#: s/about.md.tt2:22
msgid ""
"This inserts Robert into the Students table. However, the INSERT statement "
"is now followed by a DROP TABLE statement which removes the entire Students "
"table. Ouch!"
msgstr ""

#: s/about.md.tt2:24
msgid ""
"\n"
"# How to avoid Bobby Tables"
msgstr ""

#: s/about.md.tt2:27
msgid "There is only one way to avoid Bobby Tables attacks"
msgstr ""

#: s/about.md.tt2:29
msgid ""
"* Do not create SQL statements that include outside data.\n"
"* Use parameterized SQL calls."
msgstr ""

#: s/about.md.tt2:32
msgid ""
"That's it. Don't try to escape invalid characters. Don't try to do it "
"yourself. Learn how to use parameterized statements. Always, every single "
"time."
msgstr ""

#: s/about.md.tt2:34
msgid ""
"The strip gets one thing crucially wrong. The answer is not to \"sanitize "
"your database inputs\" yourself. It is prone to error.\n"
msgstr ""

#: s/asp.md.tt2:1
msgid ""
"ASP\n"
"==="
msgstr ""

#: s/asp.md.tt2:4
msgid "В ASP используются метки в качестве значений параметров."
msgstr ""

#: s/asp.md.tt2:6
msgid ""
"    objCmd.CommandType = adCmdText;\n"
"    objCmd.CommandText = \"UPDATE members SET photo = ? WHERE memberID = ?"
"\";\n"
"    objCmd.Parameters.Append(objCmd.CreateParameter(\"filename\", adVarChar, "
"adParamInput, 510, fileName));\n"
"    objCmd.Parameters.Append(objCmd.CreateParameter(\"memberID\", adInteger, "
"adParamInput, 4, memberid ));\n"
"    objCmd.Execute(adExecuteNoRecords);"
msgstr ""

#: s/asp.md.tt2:12
msgid ""
"\n"
"В ASP.NET поддерживаются именованные параметры."
msgstr ""

#: s/asp.md.tt2:15
msgid ""
"    objCmd.CommandType = adCmdText;\n"
"    objCmd.CommandText = \"UPDATE members SET photo = @filename WHERE "
"memberID = @memberID\";\n"
"    objCmd.Parameters.Append(objCmd.CreateParameter(\"@memberID\", "
"adInteger, adParamInput, 4, memberid ));\n"
"    objCmd.Parameters.Append(objCmd.CreateParameter(\"@filename\", "
"adVarChar, adParamInput, 510, fileName));\n"
"    objCmd.Execute(adExecuteNoRecords);\n"
"    gblDelobjParams(objCmd);"
msgstr ""

#: s/asp.md.tt2:22 s/dotnet.md.tt2:13 s/perl.md.tt2:43 s/python.md.tt2:14
#: s/ruby.md.tt2:15 s/scheme.md.tt2:15
msgid ""
"Список дел\n"
"-----"
msgstr ""

#: s/asp.md.tt2:25
msgid "Добавить больше материала\n"
msgstr ""

#: s/coldfusion.md.tt2:1
msgid ""
"ColdFusion\n"
"=========="
msgstr ""

#: s/coldfusion.md.tt2:4
<<<<<<< HEAD
msgid ""
"In ColdFusion there is a tag called `cfqueryparam` that should be used "
"whenever writing inline queries."
=======
msgid "В ColdFusion есть тег `cfqueryparam`, который всегда нужно использовать во встроенных запросах."
>>>>>>> dea5b38... Translated pages from ASP to Delphi, part of index page.
msgstr ""

#: s/coldfusion.md.tt2:6
msgid ""
"    <cfquery name=\"queryTest\">\n"
"    SELECT FirstName, LastName, Phone\n"
"    FROM   tblUser\n"
"    WHERE  Status =\n"
"      <cfqueryparam cfsqltype=\"CF_SQL_VARCHAR\" value=\"#form.status#\">\n"
"    </cfquery>"
msgstr ""

#: s/coldfusion.md.tt2:13
msgid ""
"\n"
<<<<<<< HEAD
"Stored procedures can be invoked with the `cfstoredproc` and `cfprocparam` "
"tags."
=======
"Хранимые процедуры также могут вызываться с тегами `cfstoredproc` и `cfprocparam`."
>>>>>>> dea5b38... Translated pages from ASP to Delphi, part of index page.
msgstr ""

#: s/coldfusion.md.tt2:16
msgid ""
<<<<<<< HEAD
"Recent versions of ColdFusion provide a set of functions to run queries "
"that\n"
"have a slightly different syntax, but still provide parameterized queries."
=======
"Последние версии ColdFusion предоставляют набор функций для выполнения запросов,\n"
"которые имеют немного другой синтаксис, но по-прежнему позволяют параметризовать запрос."
>>>>>>> dea5b38... Translated pages from ASP to Delphi, part of index page.
msgstr ""

#: s/coldfusion.md.tt2:19
msgid ""
"\n"
"    <cfscript>\n"
"      var myQuery = new Query(sql=\"\n"
"        SELECT FirstName, LastName, Phone\n"
"        FROM   tblUser\n"
"        WHERE  Status = :status\n"
"      \");\n"
"      myQuery.addParam(\n"
"        name      = \"status\",\n"
"        value     = form.status,\n"
"        cfsqltype = \"cf_sql_varchar\"\n"
"      );\n"
"      var rawQuery = myQuery.execute().getResult();\n"
"    </cfscript>"
msgstr ""

#: s/csharp.md.tt2:1
msgid ""
"C\\#\n"
"==="
msgstr ""

#: s/csharp.md.tt2:4
<<<<<<< HEAD
msgid ""
"From the [C# Online](http://en.csharp-online.net/) wiki page [ASP.NET "
"Security Hacks--Avoiding SQL Injection](http://en.csharp-online.net/ASP."
"NET_Security_Hacks%E2%80%94Avoiding_SQL_Injection)"
=======
msgid "С сайта [C# Online](http://en.csharp-online.net/), из вики-странички [ASP.NET Security Hacks--Avoiding SQL Injection](http://en.csharp-online.net/ASP.NET_Security_Hacks%E2%80%94Avoiding_SQL_Injection)"
>>>>>>> dea5b38... Translated pages from ASP to Delphi, part of index page.
msgstr ""

#: s/csharp.md.tt2:6
msgid ""
"\n"
"    SqlCommand userInfoQuery = new SqlCommand(\n"
"        \"SELECT id, name, email FROM users WHERE id = @UserName\",\n"
"        someSqlConnection);"
msgstr ""

#: s/csharp.md.tt2:11
msgid ""
<<<<<<< HEAD
"    SqlParameter userNameParam = userInfoQuery.Parameters.Add(\"@UserName"
"\",\n"
"        SqlDbType.VarChar, 25 /* max length of field */ );"
=======
"    SqlParameter userNameParam = userInfoQuery.Parameters.Add(\"@UserName\",\n"
"        SqlDbType.VarChar, 25 /* максимальная длина поля */ );"
>>>>>>> dea5b38... Translated pages from ASP to Delphi, part of index page.
msgstr ""

#: s/csharp.md.tt2:14
msgid ""
"    // userName — это строка, которую ввел пользователь\n"
"    userNameParam.Value = userName;"
msgstr ""

#: s/csharp.md.tt2:17
msgid "Или проще:"
msgstr ""

#: s/csharp.md.tt2:19
msgid ""
"\n"
"    String username = \"joe.bloggs\";\n"
"    SqlCommand sqlQuery = new SqlCommand(\"SELECT user_id, first_name,"
"last_name FROM users WHERE username = ?username\",  sqlConnection);\n"
"    sqlQuery.Parameters.AddWithValue(\"?username\", username);\n"
msgstr ""

#: s/delphi.md.tt2:1
msgid ""
"Delphi\n"
"======"
msgstr ""

#: s/delphi.md.tt2:4
msgid "Пример использования подготовленных выражений:"
msgstr ""

#: s/delphi.md.tt2:6
msgid ""
"    query.SQL.Text := 'update people set name=:Name where id=:ID';\n"
"    query.Prepare;\n"
"    query.ParamByName( 'Name' ).AsString := name;\n"
"    query.ParamByName( 'ID' ).AsInteger := id;\n"
"    query.ExecSQL;\n"
msgstr ""

#: s/dotnet.md.tt2:1
msgid ""
".NET\n"
"===="
msgstr ""

#: s/dotnet.md.tt2:4
msgid "Ссылки:"
msgstr ""

#: s/dotnet.md.tt2:6
<<<<<<< HEAD
msgid ""
"-    [SqlCommand.Prepare](http://msdn.microsoft.com/en-us/library/system."
"data.sqlclient.sqlcommand.prepare.aspx) in the .NET Framework Class Library"
=======
msgid "-    Метод [SqlCommand.Prepare](http://msdn.microsoft.com/ru-ru/library/system.data.sqlclient.sqlcommand.prepare.aspx) в библиотеке классов .NET Framework"
>>>>>>> dea5b38... Translated pages from ASP to Delphi, part of index page.
msgstr ""

#: s/dotnet.md.tt2:8
msgid "Статьи:"
msgstr ""

#: s/dotnet.md.tt2:10
msgid ""
<<<<<<< HEAD
"-   [SQL injection](http://msdn.microsoft.com/en-us/library/ms161953.aspx) "
"on MSDN\n"
"-   [SQL Injection and how to avoid it](http://blogs.msdn.com/tom/"
"archive/2008/05/29/sql-injection-and-how-to-avoid-it.aspx) on the ASP.NET "
"Debugging blog"
=======
"-   [«Атака путем внедрения кода SQL»](http://msdn.microsoft.com/ru-ru/library/ms161953(v=SQL.100).aspx) на портале MSDN\n"
"-   [«SQL-инъекции и способы защиты от них»](http://blogs.msdn.com/tom/archive/2008/05/29/sql-injection-and-how-to-avoid-it.aspx) в блоге ASP.NET Debugging"
>>>>>>> dea5b38... Translated pages from ASP to Delphi, part of index page.
msgstr ""

#: s/dotnet.md.tt2:16
msgid ""
"-   Добавить больше материала\n"
"-   Добавить примеры кода\n"
msgstr ""

#: s/index.md.tt2:1
msgid ""
"Кто такой Робин-Брось-Таблицу?\n"
"===================="
msgstr ""
"Кто такой Робин-Брось-Таблицу?\n"
"===================="

#: s/index.md.tt2:4
msgid "[Из комикса _xkcd_](http://xkcd.ru/327/)"
msgstr ""

#: s/index.md.tt2:6
<<<<<<< HEAD
msgid ""
"<a href=\"http://xkcd.com/327/\"><img src=\"/img/xkcd.png\" alt=\"xkcd Bobby "
"Tables Cartoon\" height=\"205\" width=\"666\" /></a>"
=======
msgid "<a href=\"http://xkcd.ru/327/\"><img src=\"/img/xkcd.png\" alt=\"xkcd Мамины эксплойты\" height=\"205\" width=\"666\" /></a>"
>>>>>>> dea5b38... Translated pages from ASP to Delphi, part of index page.
msgstr ""

#: s/index.md.tt2:8
msgid "<br clear=\"right\">"
msgstr ""

#: s/index.md.tt2:10
<<<<<<< HEAD
msgid ""
"**School**: Hi, this is your son's school. We're having some computer "
"trouble."
=======
msgid "**Школа**: Здравствуйте, это из школы, где учится ваш сын. У нас тут неприятности с компьютером."
>>>>>>> dea5b38... Translated pages from ASP to Delphi, part of index page.
msgstr ""

#: s/index.md.tt2:12
msgid "**Мама**: О, боже. Он что-то сломал?"
msgstr ""

#: s/index.md.tt2:14
<<<<<<< HEAD
msgid ""
"**School**: In a way. Did you really name your son `Robert'); DROP TABLE "
"Students;--`?"
=======
msgid "**Школа**: Можно сказать... Вы действительно назвали своего сына Роберт'); DROP TABLE Students;--?"
>>>>>>> dea5b38... Translated pages from ASP to Delphi, part of index page.
msgstr ""

#: s/index.md.tt2:16
msgid "**Мама**: А, да. Дома мы его зовем Робин-Брось-Таблицу."
msgstr ""

#: s/index.md.tt2:18
<<<<<<< HEAD
msgid ""
"**School**: Well, we've lost this year's student records. I hope you're "
"happy."
=======
msgid "**Школа**: Теперь у нас стерлась база учеников за этот год. Надеюсь, вы рады."
>>>>>>> dea5b38... Translated pages from ASP to Delphi, part of index page.
msgstr ""

#: s/index.md.tt2:20
msgid "**Мама**: А я надеюсь, что это научит вас экранировать символы во входных данных."
msgstr ""

<<<<<<< HEAD
#: s/index.md.tt2:24
=======
#: s/index.md.tt2:22
msgid ""
"\n"
"Почему в школе Роберта потеряли базу учеников?\n"
"=========================================="
msgstr ""

#: s/index.md.tt2:26
msgid "Очевидно, записи обо всех учениках в школе хранятся в таблице с названием Students. Когда приходит новый ученик, в таблицу вставляется новая запись с его именем. Код вставки может выглядеть так:"
msgstr ""

#: s/index.md.tt2:28
msgid ""
"    $sql = \"INSERT INTO Students (Name) VALUES ('\" . $studentName . \"');\";\n"
"    execute_sql($sql);"
msgstr ""

#: s/index.md.tt2:31
msgid "The first line creates a string containing an SQL INSERT statement. The content of the `$studentName` variable is glued into the SQL statement. The second line sends the resulting SQL statement to the database. The pitfall of this code is that outside data, in this case the content of `$studentName`, becomes part of the SQL statement."
msgstr ""

#: s/index.md.tt2:33
msgid "First let's see what the SQL statement looks like if we insert a student named John:"
msgstr ""

#: s/index.md.tt2:35
msgid "    INSERT INTO Students (Name) VALUES ('John');"
msgstr ""

#: s/index.md.tt2:37
msgid "This does exactly what we want: it inserts John into the Students table."
msgstr ""

#: s/index.md.tt2:39
msgid "Now we insert little Bobby Tables, by setting `$studentName` to `Robert'); DROP TABLE Students;--`. The SQL statement becomes:"
msgstr ""

#: s/index.md.tt2:41
msgid "    INSERT INTO Students (Name) VALUES ('Robert'); DROP TABLE Students;--');"
msgstr ""

#: s/index.md.tt2:43
msgid "Это команда вставляет запись о Роберте в таблицу Students. Однако, после команды INSERT идет команда DROP TABLE, которая удаляет всю таблицу студентов. Ой!"
msgstr ""

#: s/index.md.tt2:45
msgid ""
"\n"
"Как избежать случая с Робертом-Брось-Таблицу\n"
"========================="
msgstr ""

#: s/index.md.tt2:49
msgid "Есть только один способ избежать таких атак"
msgstr ""

#: s/index.md.tt2:51
msgid ""
"* Не создавайте SQL выражений, которыесодержат пользовательский ввод.\n"
"* Используйте параметризованные SQL вызовы."
msgstr ""

#: s/index.md.tt2:54
msgid "Вот и все. Не пытайтесь экранировать неверные символы самостоятельно. Не пытайтесь делать это сами. Научитесь использовать параметризованные выражения. Каждый раз, всегда."
msgstr ""

#: s/index.md.tt2:56
msgid "В комиксе есть одна ошибка. \"Экранировать входные данные\" самому — это неверный способ, он подвержен ошибкам."
msgstr ""

#: s/index.md.tt2:58
>>>>>>> dea5b38... Translated pages from ASP to Delphi, part of index page.
msgid ""
"Примеры\n"
"========"
msgstr ""

<<<<<<< HEAD
#: s/index.md.tt2:27
msgid "See the sidebar to the left for your specific language."
=======
#: s/index.md.tt2:61
msgid "Смотрите разделы меню слева, чтобы увидеть примеры для конкретного языка."
>>>>>>> f3dc656... Completed translation of index page. Started Java page.
msgstr ""

#: s/index.md.tt2:29
msgid ""
"Другие ресурсы\n"
"======================"
msgstr ""

#: s/index.md.tt2:32
msgid ""
<<<<<<< HEAD
"* [SQL Injection Myths and Fallacies](http://www.slideshare.net/billkarwin/"
"sql-injection-myths-and-fallacies)\n"
"* [How to Write Injection-Proof SQL](http://www.schneier.com/blog/"
"archives/2008/10/how_to_write_in.html)\n"
"* [Defending Against SQL Injection Attacks](http://download.oracle.com/oll/"
"tutorials/SQLInjection/index.htm)"
=======
"* [Мифы и заблуждения об SQL инъекциях](http://www.slideshare.net/billkarwin/sql-injection-myths-and-fallacies)\n"
"* [Как писать SQL, устойчивый к инъекциям](http://www.schneier.com/blog/archives/2008/10/how_to_write_in.html)\n"
"* [Защиты от SQL инъекций](http://download.oracle.com/oll/tutorials/SQLInjection/index.htm)"
>>>>>>> 347ae2b... JDBC and Hibernate parts have been translated.
msgstr ""

#: s/index.md.tt2:36
msgid ""
"Дополнения приветствуются\n"
"==============="
msgstr ""

<<<<<<< HEAD
#: s/index.md.tt2:39
msgid ""
"Don't see a language that you'd like to see represented? Please let me know "
"if you have updates or additions through one of these methods, in decreasing "
"order of preference."
=======
#: s/index.md.tt2:73
<<<<<<< HEAD
msgid "Не находите нужного вам языка?Пожалуйста, дайте знать, если у вас есть какие-либо изменения или дополнения, перечисленные ниже в порядке убывания важности:"
>>>>>>> f3dc656... Completed translation of index page. Started Java page.
=======
msgid "Не находите нужного вам языка? Пожалуйста, дайте знать, если у вас есть какие-либо изменения или дополнения, перечисленные ниже в порядке убывания предпочтительности:"
>>>>>>> 347ae2b... JDBC and Hibernate parts have been translated.
msgstr ""

#: s/index.md.tt2:41
msgid ""
<<<<<<< HEAD
"* Fork the [bobby-tables repository at github](http://github.com/petdance/"
"bobby-tables), make your changes, and send me a pull request.\n"
"* Add an issue in the [issue tracker](http://github.com/petdance/bobby-"
"tables/issues).\n"
"* Email me, Andy Lester, at andy at petdance.com."
=======
"* Сделайте ветку [репозитория bobby-tables на github](http://github.com/petdance/bobby-tables), сделайте необходимые изменения, и пришлите запрос на изменение.\n"
"* Добавьте заявку в [трекер](http://github.com/petdance/bobby-tables/issues).\n"
"* Напишите мне, Энди Лестеру, по адресу andy at petdance.com."
>>>>>>> f3dc656... Completed translation of index page. Started Java page.
msgstr ""

#: s/index.md.tt2:45
msgid ""
"Переводы также приветствуются\n"
"========================="
msgstr ""

<<<<<<< HEAD
#: s/index.md.tt2:48
msgid ""
"Help translate this site! There are less than 200 phrases. No programming "
"necessary."
msgstr ""

#: s/index.md.tt2:50
msgid ""
"See the instructions at the [bobby-tables repository at github](http://"
"github.com/petdance/bobby-tables#readme)."
=======
#: s/index.md.tt2:82
msgid "Помогите перевести этот сайт! Тут меньше двухсот фраз. И никакого программирования."
msgstr ""

#: s/index.md.tt2:84
msgid "Смотрите инструкции в [репозитории bobby-tables на github](http://github.com/petdance/bobby-tables#readme)."
>>>>>>> f3dc656... Completed translation of index page. Started Java page.
msgstr ""

#: s/index.md.tt2:52
msgid ""
"Список дел\n"
"====="
msgstr ""

#: s/index.md.tt2:55
msgid ""
"* Объяснить, почему создание кода, содержащего данные извне, это плохо.\n"
"* Потенциальный прирост в скорости выполнения запросов при использовании подготовленных выражений."
msgstr ""

#: s/index.md.tt2:58
msgid ""
"Благодарности\n"
"======"
msgstr ""

<<<<<<< HEAD
#: s/index.md.tt2:61
msgid "Thanks to the following folks for their contributions:"
=======
#: s/index.md.tt2:95
msgid "Спасибо следующим людям за их вклад:"
>>>>>>> f3dc656... Completed translation of index page. Started Java page.
msgstr ""

#: s/index.md.tt2:63
msgid ""
"* [Kim Christensen](http://www.smukkekim.dk)\n"
"* Kirk Kimmel\n"
"* Nathan Mahdavi\n"
"* [Hannes Hofmann](http://www5.informatik.uni-erlangen.de/en/our-team/"
"hofmann-hannes)\n"
"* [Mike Angstadt](http://www.mangst.com)\n"
"* [Peter Ward](http://identi.ca/flowblok/)\n"
"* [David Wheeler](http://justatheory.com)\n"
"* Scott Rose\n"
"* Erik Osheim\n"
"* Russ Sivak\n"
"* [Iain Collins](http://iaincollins.com)\n"
"* Kristoffer Sall Hansen\n"
"* Jeff Emminger\n"
"* [Travis Swicegood](http://www.travisswicegood.com/)\n"
"* [Will Coleda](http://www.coleda.com/users/coke/)\n"
"* Kai Baesler\n"
"* Mike Markley\n"
"* [Michael Schwern](http://schwern.net/)\n"
"* [Jeana Clark](http://jeanaclark.org/)\n"
"* [Lars Dɪᴇᴄᴋᴏᴡ](http://search.cpan.org/~daxim/)\n"
"* [Jani Hur](http://www.jani-hur.net)\n"
"* [Sven van Haastregt](http://www.liacs.nl/home/svhaastr/)\n"
msgstr ""

#: s/java.md.tt2:1
msgid ""
"Java\n"
"===="
msgstr ""

#: s/java.md.tt2:4
msgid ""
"JDBC\n"
"----"
msgstr ""

#: s/java.md.tt2:7
msgid ""
<<<<<<< HEAD
"The [JDBC API](http://download.oracle.com/javase/tutorial/jdbc/index.html)\n"
"has a class called\n"
"[`PreparedStatement`](http://download.oracle.com/javase/6/docs/api/java/sql/"
"PreparedStatement.html)\n"
"which allows the programmer to safely insert user-supplied data\n"
"into a SQL query.  The location of each input value in the query\n"
"string is marked with a question mark.  The various `set*()` methods\n"
"are then used to safely perform the insertion."
=======
"В [JDBC API](http://download.oracle.com/javase/tutorial/jdbc/index.html)\n"
"содержится класс,\n"
"[`PreparedStatement`](http://download.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html)\n"
"который позволяет разработчику безопасно вставлять данные из пользовательского ввода\n"
"в SQL запрос. Позиция каждого входного значения в запросе\n"
"помечена вопросительным знаком. Затем используются различные `set*()` методы\n"
"для того чтобы безопасно произвести вставки."
>>>>>>> f3dc656... Completed translation of index page. Started Java page.
msgstr ""

#: s/java.md.tt2:15
msgid ""
"    String name = //пользовательский ввод\n"
"    int age = //пользовательский ввод\n"
"    Connection connection = DriverManager.getConnection(...);\n"
"    PreparedStatement statement = connection.prepareStatement(\n"
"            \"SELECT * FROM people WHERE lastName = ? AND age > ?\" );\n"
"    statement.setString(1, name); //lastName это VARCHAR\n"
"    statement.setInt(2, age); //age это INT\n"
"    ResultSet rs = statement.executeQuery();\n"
"    while (rs.next()){\n"
"        //...\n"
"    }"
msgstr ""

#: s/java.md.tt2:27
msgid ""
"\n"
"После того как объект `PreparedStatement` был создан, он может быть использован\n"
"много раз для разных запросов (например, для выполнения\n"
"одного и того же запроса на обновления разных записей). Однако такие вызовы\n"
"**неявляются потокобезопасными**, поскольку при установке параметров и выполнении запроса\n"
"вызывается множество методов.  Поэтому для избежания проблем\n"
"с многопоточностью следует использовать объект `PreparedStatement`\n"
"как локальную переменную метода нежели как поле класса."
msgstr ""

#: s/java.md.tt2:37
msgid ""
"    List<Person>; people = //пользовательский ввод\n"
"    Connection connection = DriverManager.getConnection(...);\n"
"    connection.setAutoCommit(false);\n"
"    try {\n"
"        PreparedStatement statement = connection.prepareStatement(\n"
"                \"UPDATE people SET lastName = ?, age = ? WHERE id = ?\");\n"
"        for (Person person : people){\n"
"            statement.setString(1, person.getLastName());\n"
"            statement.setInt(2, person.getAge());\n"
"            statement.setInt(3, person.getId());\n"
"            statement.execute();\n"
"        }\n"
"        connection.commit();\n"
"    } catch (SQLException e) {\n"
"        connection.rollback();\n"
"    }"
msgstr ""

#: s/java.md.tt2:54
msgid ""
<<<<<<< HEAD
"More information on `PreparedStatement` can be found in the\n"
"[Oracle JDBC tutorial](http://download.oracle.com/javase/tutorial/jdbc/"
"basics/prepared.html)."
=======
"Больше информации о классе `PreparedStatement` можно найти в:\n"
"[Руководство Oracle по JDBC](http://download.oracle.com/javase/tutorial/jdbc/basics/prepared.html)."
>>>>>>> 347ae2b... JDBC and Hibernate parts have been translated.
msgstr ""

#: s/java.md.tt2:57
msgid ""
"Hibernate\n"
"---------"
msgstr ""

#: s/java.md.tt2:60
msgid ""
"[Hibernate](http://www.hibernate.org/) использует именованные параметры\n"
"для безопасной вставки данных в запрос.  Именованный параметр состоит из\n"
"двоеточия и уникального имени параметра."
msgstr ""

#: s/java.md.tt2:64
msgid ""
"    String name = //пользовательски ввод\n"
"    int age = //пользовательски ввод\n"
"    Session session = //...\n"
"    Query query = session.createQuery(\"from People where lastName = :name "
"and age > :age\");\n"
"    query.setString(\"name\", name);\n"
"    query.setInteger(\"age\", age);\n"
"    Iterator people = query.iterate();"
msgstr ""

#: s/java.md.tt2:72
msgid ""
"В Hibernate также можно использовать позиционные параметры, как и в `PreparedStatement`,\n"
"однако использование именованных параметров более предпочтительно,\n"
"поскольку они повышают читаемость."
msgstr ""

#: s/java.md.tt2:76
msgid ""
<<<<<<< HEAD
"See the\n"
"[Hibernate Manual](http://docs.jboss.org/hibernate/stable/core/reference/en/"
"html/objectstate.html#objectstate-querying-executing-parameters)\n"
"for more information on named parameters."
=======
"Смотрите\n"
"[Руководство по Hibernate](http://docs.jboss.org/hibernate/stable/core/reference/en/html/objectstate.html#objectstate-querying-executing-parameters)\n"
"для более подробной информации об именованных параметрах."
>>>>>>> 347ae2b... JDBC and Hibernate parts have been translated.
msgstr ""

#: s/java.md.tt2:80
msgid ""
"MyBatis\n"
"-------"
msgstr ""

#: s/java.md.tt2:83
msgid ""
"[MyBatis](http://www.mybatis.org/) — это фреймворк для работы с базой данных,\n"
"который скрывает от разработчика большинство JDBC кода,\n"
"позволяя сфокусироваться на самих запросах.  SQL запросы обычно\n"
"хранятся в XML файлах."
msgstr ""

#: s/java.md.tt2:88
msgid ""
"Внутри MyBatis автоматически создает объекты `PreparedStatement`.\n"
"Разработчику ничего не нужно для этого делать."
msgstr ""

#: s/java.md.tt2:91
msgid ""
"Ниже расположен пример, который поясняет на практике основы\n"
"выполнения запросов с MyBatis.  Входные данные передаются в объект\n"
"`PeopleMapper`, а затем вставляются с помощью запроса\n"
"\"selectPeopleByNameAndAge\"."
msgstr ""

#: s/java.md.tt2:96
msgid ""
"XML документ с привязками\n"
"===================="
msgstr ""

#: s/java.md.tt2:99
msgid ""
"    <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"    <!DOCTYPE mapper\n"
"    PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n"
"    \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n"
"    <mapper namespace=\"com.bobbytables.mybatis.PeopleMapper\">\n"
"    <select id=\"selectPeopleByNameAndAge\" resultType=\"list\">\n"
"        <!-- lastName и age автоматически эскапируются --->\n"
"        SELECT * FROM people WHERE lastName = #{lastName} AND age > #{age}\n"
"    </select>\n"
"    </mapper>"
msgstr ""

#: s/java.md.tt2:110
msgid ""
"Класс Mapper'а\n"
"============"
msgstr ""

#: s/java.md.tt2:113
msgid ""
"    public interface PeopleMapper {\n"
"        List<Person> selectPeopleByNameAndAge(@Param(\"lastName\") String "
"name, @Param(\"age\") int age);\n"
"    }"
msgstr ""

#: s/java.md.tt2:117
msgid ""
"Выполнение запроса\n"
"=================="
msgstr ""

#: s/java.md.tt2:120
msgid ""
"    String name = //пользовательский ввод\n"
"    int age = //пользовательский ввод\n"
"    SqlSessionFactory sqlMapper = //...\n"
"    SqlSession session = sqlMapper.openSession();\n"
"    try {\n"
"        PeopleMapper mapper = session.getMapper(PeopleMapper.class);\n"
<<<<<<< HEAD
"        List<Person> people = mapper.selectPeopleByNameAndAge(name, age); //"
"data is automatically sanitized\n"
=======
"        List<Person> people = mapper.selectPeopleByNameAndAge(name, age); //данные автоматически эскапируются\n"
>>>>>>> 79a3f0b... MyBatis and Perl parts have been translated.
"        for (Person person : people) {\n"
"            //...\n"
"        }\n"
"    } finally {\n"
"        session.close();\n"
"    }\n"
msgstr ""

#: s/perl.md.tt2:1
msgid ""
"Perl\n"
"===="
msgstr ""

#: s/perl.md.tt2:4
<<<<<<< HEAD
msgid ""
"Perl's [DBI](http://search.cpan.org/dist/DBI), available on the [CPAN]"
"(http://search.cpan.org), supports parameterized SQL calls.  Both the `do` "
"method and `prepare` method support parameters (\"placeholders\", as they "
"call them) for most database drivers. For example:"
=======
msgid "Perl [DBI](http://search.cpan.org/dist/DBI), доступный на [CPAN](http://search.cpan.org), поддерживает параметризованные SQL запросы.  Оба метода — `do` и `prepare` — поддерживают параметры (они называются \"метками\") для большинства баз данных. Например:"
>>>>>>> 79a3f0b... MyBatis and Perl parts have been translated.
msgstr ""

#: s/perl.md.tt2:6
msgid ""
"\n"
"    $sth = $dbh->prepare(\"SELECT * FROM users WHERE email = ?\");\n"
"    foreach my $email (@emails) {\n"
"        $sth->execute($email);\n"
"        $row = $sth->fetchrow_hashref;\n"
"        [...]\n"
"    }"
msgstr ""

#: s/perl.md.tt2:14
msgid ""
"Однако параметризацию нельзя использовать для идентификаторов (имен таблиц,\n"
"имен колонок), поэтому необходимо использовать метод DBI `quote_identifier()`:"
msgstr ""

#: s/perl.md.tt2:18
msgid ""
"    # Убедимся, что имя таблицы, которое мы хотим использовать, является безопасным:\n"
"    my $quoted_table_name = $dbh->quote_identifier($table_name);"
msgstr ""

#: s/perl.md.tt2:21
msgid ""
"    # Предполагается, что @cols содержит список имен колонок, из которых вы хотите выбрать данные:\n"
"    my $cols = join ',', map { $dbh->quote_identifier($_) } @cols;"
msgstr ""

#: s/perl.md.tt2:24
msgid ""
"    my $sth = $dbh->prepare(\"SELECT $cols FROM $quoted_table_name ...\");"
msgstr ""

#: s/perl.md.tt2:26
<<<<<<< HEAD
msgid ""
"You could also avoid writing SQL by hand by using [DBIx::Class](http://p3rl."
"org/DBIx::Class), [SQL::Abstract](http://p3rl.org/SQL::Abstract) etc to "
"generate your SQL for you programmatically."
=======
msgid "Вы можете также вручную писать запросы с использованием [DBIx::Class](http://p3rl.org/DBIx::Class), [SQL::Abstract](http://p3rl.org/SQL::Abstract) и т.д., которые сгенерируют нужный SQL код."
>>>>>>> 79a3f0b... MyBatis and Perl parts have been translated.
msgstr ""

#: s/perl.md.tt2:28
msgid ""
"Режим Taint\n"
"-------------------"
msgstr ""

#: s/perl.md.tt2:31
<<<<<<< HEAD
msgid ""
"Taint mode is a special set of security checks that Perl performs on data "
"input into your program from external sources. The input data is marked as  "
"tainted (untrusted) and may not be used in commands that would allow you to "
"shoot yourself in the foot. See [the perlsec manpage](http://perldoc.perl."
"org/perlsec.html) for a detailed breakdown of what taint mode tracks."
=======
msgid "Режим Taint содержит набор специальных проверок безопасности, который Perl выполняет над входными данными вашей программы. Входные данные помечаются "грязными" (непроверенными) и не могут быть использованы в командах, с помощью которых вы можете выстрелить себе в ногу. За более детальной информацией обратитесь к [странице помощи perlsec](http://perldoc.perl.org/perlsec.html)."
>>>>>>> 79a3f0b... MyBatis and Perl parts have been translated.
msgstr ""

#: s/perl.md.tt2:33
msgid "Включение taint режима:"
msgstr ""

#: s/perl.md.tt2:35
msgid ""
"    # Из командной строки\n"
"    perl -T program.pl"
msgstr ""

#: s/perl.md.tt2:38
msgid ""
"    # В начале скрипта\n"
"    #!/usr/bin/perl -T"
msgstr ""

#: s/perl.md.tt2:41
<<<<<<< HEAD
msgid ""
"When your script trips one of the taint checks your application will issue a "
"fatal error message. For testing purposes `-t` will issue warnings instead "
"of fatal errors. `-t` is not a substitute for `-T`."
=======
msgid "Когда в приложении не срабатывает какая-либо проверка, возникает ошибка. Для отладки используйте параметр `-t`: вместо ошибок будут выдаватьсчя предупреждения. `-t` не является заменой `-T`."
>>>>>>> 79a3f0b... MyBatis and Perl parts have been translated.
msgstr ""

#: s/perl.md.tt2:46
msgid "Объяснить, как DBI поддерживаем taint режим, входящий и исходящий.\n"
msgstr ""

#: s/php.md.tt2:1
msgid ""
"PHP\n"
"==="
msgstr ""

#: s/php.md.tt2:4
msgid ""
"В PHP поддержка параметров менее организованна, чем в [Perl](./perl.html).\n"
"Стандартное [расширение MySQL](http://php.net/manual/en/book.mysql.php)\n"
"не поддерживает параметризацию, а, например,\n"
"[PostgreSQL расширение](http://www.php.net/manual/en/book.pgsql.php) поддерживает:"
msgstr ""

#: s/php.md.tt2:10
msgid ""
"    $result = pg_query_params( $dbh, 'SELECT * FROM users WHERE email = $1', "
"array($email) );"
msgstr ""

#: s/php.md.tt2:12
msgid ""
"Обратите внимание, что запрос должен быть обрамлен одинарными кавычками или же симпол '$' должен быть эскапирован, чтобы PHP не принял его за переменную."
msgstr ""

#: s/php.md.tt2:15
msgid ""
"**Однако лучше всего** следует использовать дополнительный уровень абстракции.\n"
"[ODBC](http://php.net/manual/en/book.uodbc.php) и\n"
"[PDO](http://www.php.net/manual/en/book.pdo.php) расширения\n"
"поддерживают параметризацию и запросы к разным базам данных:"
msgstr ""

#: s/php.md.tt2:20
msgid ""
"Использование mysqli\n"
"------------"
msgstr ""

#: s/php.md.tt2:23
msgid "Расширение MySQL Improved умеет обрабатывать связанные параметры."
msgstr ""

#: s/php.md.tt2:25
msgid ""
"    $stmt = $db->prepare('update people set name = ? where id = ?');\n"
"    $stmt->bind_param('si',$name,$id);\n"
"    $stmt->execute();"
msgstr ""

#: s/php.md.tt2:29
msgid ""
"Использование ADODB\n"
"-----------"
msgstr ""

#: s/php.md.tt2:32
<<<<<<< HEAD
msgid ""
"ADODB provides a way to prepare, bind and execute all in the same method "
"call."
=======
msgid "ADODB предоставляет возможность подготавливать, связывать и выполнять запрос с помощью одного метода."
>>>>>>> fb474a2... PHP part has been translated.
msgstr ""

#: s/php.md.tt2:34
msgid ""
"    $dbConnection = NewADOConnection($connectionString);\n"
"    $sqlResult = $dbConnection->Execute(\n"
"        'SELECT user_id,first_name,last_name FROM users WHERE username=? AND "
"password=?',\n"
"        array($_REQUEST['username'], sha1($_REQUEST['password'])\n"
"    );"
msgstr ""

#: s/php.md.tt2:40
msgid ""
"Использование ODBC слоя\n"
"--------------------"
msgstr ""

#: s/php.md.tt2:43
msgid ""
"    $stmt = odbc_prepare( $conn, 'SELECT * FROM users WHERE email = ?' );\n"
"    $success = odbc_execute( $stmt, array($email) );"
msgstr ""

#: s/php.md.tt2:46
msgid "Или:"
msgstr ""

#: s/php.md.tt2:48
msgid ""
"    $res = odbc_exec($conn, 'SELECT * FROM users WHERE email = ?', array"
"($email));\n"
"    $sth = $dbh->prepare('SELECT * FROM users WHERE email = :email');\n"
"    $sth->execute(array(':email' => $email));"
msgstr ""

#: s/php.md.tt2:52
msgid ""
"Использование PDO слоя\n"
"-------------------"
msgstr ""

#: s/php.md.tt2:55
msgid "Вот длинный способ связывания параметров со значениями."
msgstr ""

#: s/php.md.tt2:57
msgid ""
"    $dbh = new PDO('mysql:dbname=testdb;host=127.0.0.1', $user, $password);\n"
"    $stmt = $dbh->prepare('INSERT INTO REGISTRY (name, value) VALUES (:"
"name, :value)');\n"
"    $stmt->bindParam(':name', $name);\n"
"    $stmt->bindParam(':value', $value);"
msgstr ""

#: s/php.md.tt2:62
msgid ""
"    // вставка одной записи\n"
"    $name = 'one';\n"
"    $value = 1;\n"
"    $stmt->execute();"
msgstr ""

#: s/php.md.tt2:67
msgid "А вот более короткий способ."
msgstr ""

#: s/php.md.tt2:69
msgid ""
"    $dbh = new PDO('mysql:dbname=testdb;host=127.0.0.1', $user, $password);\n"
"    $stmt = $dbh->prepare('UPDATE people SET name = :new_name WHERE id = :"
"id');\n"
"    $stmt->execute( array('new_name' => $name, 'id' => $id) );\n"
msgstr ""

#: s/plsql.md.tt2:1
msgid ""
"PL/SQL\n"
"======"
msgstr ""

#: s/plsql.md.tt2:4
msgid "В примерах используется таблица со следующей структурой:"
msgstr ""

#: s/plsql.md.tt2:6
msgid ""
"    CREATE TABLE users (\n"
"        username VARCHAR2(8) UNIQUE,\n"
"        accessed_at DATE,\n"
"        superuser NUMBER(1,0)\n"
"    );"
msgstr ""

#: s/plsql.md.tt2:12
msgid ""
"    INSERT INTO users VALUES ('janihur',  sysdate,      0);\n"
"    INSERT INTO users VALUES ('petdance', sysdate - 12, 1);\n"
"    INSERT INTO users VALUES ('albundy',  sysdate - 3,  0);\n"
"    INSERT INTO users VALUES ('donduck',  sysdate - 18, 0);"
msgstr ""

#: s/plsql.md.tt2:17
msgid ""
"Если возможно, всегда выбирайте статический SQL\n"
"--------------------------------------"
msgstr ""

#: s/plsql.md.tt2:20
msgid "Статический SQL позволяет избежать инъекций."
msgstr ""

#: s/plsql.md.tt2:22
msgid ""
"    CREATE OR REPLACE FUNCTION user_access (\n"
"        p_uname IN VARCHAR2\n"
"    ) RETURN date AS\n"
"        v_accessed_at date;\n"
"    BEGIN\n"
"        SELECT accessed_at INTO v_accessed_at FROM users WHERE username = "
"p_uname;\n"
"        RETURN v_accessed_at;\n"
"    END;\n"
"    /"
msgstr ""

#: s/plsql.md.tt2:32 s/plsql.md.tt2:64 s/plsql.md.tt2:94
msgid ""
"\n"
"    SELECT user_access('janihur')\n"
"      AS \"JANIHUR LAST SEEN\" FROM DUAL;"
msgstr ""

#: s/plsql.md.tt2:36 s/plsql.md.tt2:68 s/plsql.md.tt2:98
msgid ""
"    JANIHUR LAST SEEN\n"
"    -------------------\n"
"    2011-08-03 17:11:24"
msgstr ""

#: s/plsql.md.tt2:40 s/plsql.md.tt2:72 s/plsql.md.tt2:102
msgid ""
"    SELECT user_access('whocares'' or superuser = 1 or username = "
"''whocares') \n"
"      AS \"SUPERUSER LAST SEEN\" FROM DUAL;"
msgstr ""

#: s/plsql.md.tt2:43 s/plsql.md.tt2:105
msgid ""
"    SUPERUSER LAST SEEN\n"
"    -------------------"
msgstr ""

#: s/plsql.md.tt2:46
msgid ""
"\n"
"Если все же нужно использовать динамический SQL, избегайте конкатенации строк\n"
"----------------------------------------------------------------"
msgstr ""

#: s/plsql.md.tt2:50
msgid "Конкатенация строк позволяет инъектировать SQL:"
msgstr ""

#: s/plsql.md.tt2:52
msgid ""
"    CREATE OR REPLACE FUNCTION user_access (\n"
"        p_uname IN VARCHAR2\n"
"    ) RETURN date AS\n"
"        v_accessed_at date;\n"
"        v_query constant varchar2(32767) := \n"
"          'SELECT accessed_at FROM users WHERE username = ''' || p_uname || "
"'''';\n"
"    BEGIN\n"
"        EXECUTE IMMEDIATE v_query INTO v_accessed_at;\n"
"        RETURN v_accessed_at;\n"
"    END;\n"
"    /"
msgstr ""

#: s/plsql.md.tt2:75
msgid ""
"    SUPERUSER LAST SEEN\n"
"    -------------------\n"
"    2011-07-22 17:11:24"
msgstr ""

#: s/plsql.md.tt2:79
msgid "Вместо этого используйте связанные переменные:"
msgstr ""

#: s/plsql.md.tt2:81
msgid ""
"\n"
"    CREATE OR REPLACE FUNCTION user_access (\n"
"        p_uname IN VARCHAR2\n"
"    ) RETURN date AS\n"
"        v_accessed_at date;\n"
"        v_query constant varchar2(32767) := \n"
"          'SELECT accessed_at FROM users WHERE username = :a';\n"
"    BEGIN\n"
"        EXECUTE IMMEDIATE v_query INTO v_accessed_at USING p_uname;\n"
"        RETURN v_accessed_at;\n"
"    END;\n"
"    /"
msgstr ""

#: s/plsql.md.tt2:108
msgid ""
"Неявная инъекция при конвертировании типов данных\n"
"---------------------------------------"
msgstr ""

#: s/plsql.md.tt2:111
<<<<<<< HEAD
msgid ""
"Also NLS session parameters (`NLS_DATE_FORMAT`, `NLS_TIMESTAMP_FORMAT`, "
"`NLS_TIMESTAMP_TZ_FORMAT`, `NLS_NUMERIC_CHARACTER`) can be used to modify or "
"inject SQL statements."
msgstr ""

#: s/plsql.md.tt2:113
msgid ""
"In next example data type conversion takes place when `p_since` is "
"implicitly converted to a string for concatenation. Note how the value of "
"`NLS_DATE_FORMAT` affects to the query string in `users_since()` function!"
=======
msgid "Параметры сессии NLS (`NLS_DATE_FORMAT`, `NLS_TIMESTAMP_FORMAT`, `NLS_TIMESTAMP_TZ_FORMAT`, `NLS_NUMERIC_CHARACTER`) также могут быть использованы для того что бы изменять или инъектировать SQL выражения."
msgstr ""

#: s/plsql.md.tt2:113
msgid "В следующем примере происходит конвертация типов данных, когда `p_since` неявно когвертируется в строку, а затем результат используется для конкатенации. Обратите внимание, что значение `NLS_DATE_FORMAT` влияет на тсроку запроса в функции `users_since()`!"
>>>>>>> c61a923... PL/SQL part has been translated.
msgstr ""

#: s/plsql.md.tt2:115 s/plsql.md.tt2:163
msgid "    ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI:SS';"
msgstr ""

#: s/plsql.md.tt2:117 s/plsql.md.tt2:165
msgid ""
"    CREATE OR REPLACE TYPE userlist_t AS TABLE OF VARCHAR2(8);\n"
"    /"
msgstr ""

#: s/plsql.md.tt2:120
msgid ""
"    CREATE OR REPLACE FUNCTION users_since(\n"
"        p_since IN DATE\n"
"    ) RETURN userlist_t PIPELINED AS\n"
"        v_users userlist_t;\n"
"        v_query constant varchar2(32767) := \n"
"          'SELECT username FROM users WHERE superuser = 0 and accessed_at > "
"''' || p_since || ''' order by accessed_at desc';\n"
"    BEGIN\n"
"        DBMS_OUTPUT.PUT_LINE('v_query = ' || v_query);\n"
"        EXECUTE IMMEDIATE v_query BULK COLLECT INTO v_users;"
msgstr ""

#: s/plsql.md.tt2:130 s/plsql.md.tt2:178
msgid ""
"        FOR i IN v_users.FIRST .. v_users.LAST LOOP\n"
"          PIPE ROW(v_users(i));\n"
"        END LOOP;"
msgstr ""

#: s/plsql.md.tt2:134 s/plsql.md.tt2:182
msgid ""
"        RETURN;\n"
"    END;\n"
"    /"
msgstr ""

#: s/plsql.md.tt2:138
msgid ""
"\n"
"    ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD\"SUPRISE!\"';\n"
"    SELECT COLUMN_VALUE AS \"REGULARS\" FROM TABLE(users_since(sysdate - "
"30));"
msgstr ""

#: s/plsql.md.tt2:142
msgid ""
"    v_query = SELECT username FROM users WHERE superuser = 0 and accessed_at "
">\n"
"    '2011-07-04SUPRISE!' order by accessed_at desc"
msgstr ""

#: s/plsql.md.tt2:145
msgid ""
"    REGULARS\n"
"    --------\n"
"    janihur\n"
"    albundy\n"
"    donduck"
msgstr ""

#: s/plsql.md.tt2:151
msgid ""
"    ALTER SESSION SET NLS_DATE_FORMAT = '\"'' or superuser = 1 or username = "
"''whocares\"';\n"
"    SELECT COLUMN_VALUE AS \"SUPERUSER IS\" FROM TABLE(users_since(sysdate - "
"30));"
msgstr ""

#: s/plsql.md.tt2:154
msgid ""
"    v_query = SELECT username FROM users WHERE superuser = 0 and accessed_at "
"> ''\n"
"    or superuser = 1 or username = 'whocares' order by accessed_at desc"
msgstr ""

#: s/plsql.md.tt2:157
msgid ""
"    SUPERUSE\n"
"    --------\n"
"    petdance"
msgstr ""

#: s/plsql.md.tt2:161
<<<<<<< HEAD
msgid ""
"The remedy is to set the format modifier explicitly: `to_char(p_since, 'YYYY-"
"MM-DD')`."
=======
msgid "Спасение в том, чтобы задавать идентификатор формата явно: `to_char(p_since, 'YYYY-MM-DD')`."
>>>>>>> c61a923... PL/SQL part has been translated.
msgstr ""

#: s/plsql.md.tt2:168
msgid ""
"    CREATE OR REPLACE FUNCTION users_since(\n"
"        p_since IN DATE\n"
"    ) RETURN userlist_t PIPELINED AS\n"
"        v_users userlist_t;\n"
"        v_query constant varchar2(32767) := \n"
"          'SELECT username FROM users WHERE superuser = 0 and accessed_at > "
"''' || to_char(p_since, 'YYYY-MM-DD') || ''' order by accessed_at desc';\n"
"    BEGIN\n"
"        DBMS_OUTPUT.PUT_LINE('v_query = ' || v_query);\n"
"        EXECUTE IMMEDIATE v_query BULK COLLECT INTO v_users;"
msgstr ""

#: s/plsql.md.tt2:186
<<<<<<< HEAD
msgid ""
"Now the value of NLS parameter `NLS_DATE_FORMAT` is ignored during the query."
=======
msgid "Теперь значение NLS параметра `NLS_DATE_FORMAT` будет проигнорировано."
>>>>>>> c61a923... PL/SQL part has been translated.
msgstr ""

#: s/plsql.md.tt2:188
msgid ""
"    ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD\"SUPRISE!\"';\n"
"    SELECT COLUMN_VALUE AS \"REGULARS\" FROM TABLE(users_since(sysdate - "
"30));"
msgstr ""

#: s/plsql.md.tt2:191
msgid ""
"    v_query = SELECT username FROM users WHERE superuser = 0 and accessed_at "
">\n"
"    '2011-07-04' order by accessed_at desc"
msgstr ""

#: s/plsql.md.tt2:194
msgid ""
"    REGULARS\n"
"    --------\n"
"    janihur\n"
"    albundy\n"
"    donduck\n"
msgstr ""

#: s/postgresql.md.tt2:1
msgid ""
"PostgreSQL\n"
"=========="
msgstr ""

#: s/postgresql.md.tt2:4
<<<<<<< HEAD
msgid ""
"All of PostgreSQL's [procedural languages](http://www.postgresql.org/docs/"
"current/static/xplang.html), which allow you to write functions and "
"procedures inside the database, allow you to execute arbitrary SQL "
"statements."
=======
msgid "Все [процедурные языки](http://www.postgresql.org/docs/current/static/xplang.html) PostgreSQL, которые позволяют писать функции и процедуры для баз данных, позволяют также выполнять произвольные SQL выражения."
>>>>>>> 3a57ce0... Translating rest of text.
msgstr ""

#: s/postgresql.md.tt2:6
msgid ""
"PL/pgSQL\n"
"--------"
msgstr ""

#: s/postgresql.md.tt2:9
<<<<<<< HEAD
msgid ""
"The safest way to execute SQL inside a PL/pgSQL statement is just to do so:"
=======
msgid "Самый безопасный способ выполнения SQL внутри PL/pgSQL выражений:"
>>>>>>> 3a57ce0... Translating rest of text.
msgstr ""

#: s/postgresql.md.tt2:11
msgid ""
"    CREATE OR REPLACE FUNCTION user_access (\n"
"        p_uname TEXT\n"
"    ) RETURNS timestamp language plpgsql AS $$\n"
"    BEGIN\n"
"        RETURN accessed_at FROM users WHERE username = p_uname;\n"
"    END;\n"
"    $$;"
msgstr ""

#: s/postgresql.md.tt2:19
<<<<<<< HEAD
msgid ""
"For such a simple case, you're actually better off writing a pure SQL "
"function:"
=======
msgid "Для такого простого случая лучше всего написать чистую SQL функцию:"
>>>>>>> 3a57ce0... Translating rest of text.
msgstr ""

#: s/postgresql.md.tt2:21
msgid ""
"    CREATE OR REPLACE FUNCTION user_access (\n"
"        p_uname TEXT\n"
"    ) RETURNS timestamp language sql AS $$\n"
"        SELECT accessed_at FROM users WHERE username = $1;\n"
"    $$;"
msgstr ""

#: s/postgresql.md.tt2:27
<<<<<<< HEAD
msgid ""
"But sometimes you have to do more complicated things. Perhaps you "
"dynamically add `WHERE` clause expressions based on input. In such cases, "
"you'll end up using PL/pgSQL's `EXECUTE` syntax. Here's an example with an "
"SQL injection vulnerability:"
=======
msgid "Однако иногда приходится делать вещи посложнее. Возможно, вам нужно будет динамически добавить блок `WHERE`, основываясь на входных данных. В таких случаях пригодится синтаксис функции PL/pgSQL' `EXECUTE`. Вот пример кода, который уязвим для SQL инъекции:"
>>>>>>> 3a57ce0... Translating rest of text.
msgstr ""

#: s/postgresql.md.tt2:29
msgid ""
"    CREATE OR REPLACE FUNCTION get_users(\n"
"        p_column TEXT,\n"
"        p_value  TEXT\n"
"    ) RETURNS SETOF users LANGUAGE plpgsql AS $$\n"
"    DECLARE\n"
"        query TEXT := 'SELECT * FROM users';\n"
"    BEGIN\n"
"        IF p_column IS NOT NULL THEN\n"
"            query := query || ' WHERE ' || p_column\n"
"                  || $_$ = '$_$ || p_value || $_$'$_$;\n"
"        END IF;\n"
"        RETURN QUERY EXECUTE query;\n"
"    END;\n"
"    $$;"
msgstr ""

#: s/postgresql.md.tt2:44
<<<<<<< HEAD
msgid ""
"Both the `p_column` and the `p_value` arguments are vulnerable. The way to "
"avoid this problem is to use the `quote_ident()` function to quote an SQL "
"identifier (`p_column` in this case) and `quote_lteral()` to quote a literal "
"value:"
=======
msgid "Оба аргумента — `p_column` и `p_value` уязвимы. Чтобы избежать инъекции, нужно использовать функцию `quote_ident()` для SQL идентификатора (`p_column`) и `quote_lteral()` для значений:"
>>>>>>> 3a57ce0... Translating rest of text.
msgstr ""

#: s/postgresql.md.tt2:46
msgid ""
"    CREATE OR REPLACE FUNCTION get_users(\n"
"        p_column TEXT,\n"
"        p_value  TEXT\n"
"    ) RETURNS SETOF users LANGUAGE plpgsql AS $$\n"
"    DECLARE\n"
"        query TEXT := 'SELECT * FROM users';\n"
"    BEGIN\n"
"        IF p_column IS NOT NULL THEN\n"
"            query := query || ' WHERE ' || quote_ident(p_column)\n"
"                  || ' = ' || quote_literal(p_value);\n"
"        END IF;\n"
"        RETURN QUERY EXECUTE query;\n"
"    END;\n"
"    $$;"
msgstr ""

#: s/postgresql.md.tt2:61
msgid "Этот еще и читается легче!"
msgstr ""

#: s/postgresql.md.tt2:63
msgid ""
"PL/Perl\n"
"-------"
msgstr ""

#: s/postgresql.md.tt2:66 s/postgresql.md.tt2:71
msgid "TODO."
msgstr ""

#: s/postgresql.md.tt2:68
msgid ""
"PL/Python\n"
"---------"
msgstr ""

#: s/postgresql.md.tt2:73
msgid "### PL/Tcl"
msgstr ""

#: s/postgresql.md.tt2:75
msgid "TODO.\n"
msgstr ""

#: s/python.md.tt2:1
msgid ""
"Python\n"
"======"
msgstr ""

#: s/python.md.tt2:4
<<<<<<< HEAD
msgid ""
"Using the [Python DB API](http://wiki.python.org/moin/DatabaseProgramming/), "
"don't do this:"
=======
msgid "Используя [Python DB API](http://wiki.python.org/moin/DatabaseProgramming/), не делайте так:"
>>>>>>> 7d76472... Some more translation.
msgstr ""

#: s/python.md.tt2:6
msgid ""
"    # НЕ делайте так.\n"
"    cmd = \"update people set name='%s' where id='%s'\" % (name, id)\n"
"    curs.execute(cmd)"
msgstr ""

#: s/python.md.tt2:10
msgid "Лучше сделать так:"
msgstr ""

#: s/python.md.tt2:12
msgid "    curs.execute('update people set name=:1 where id=:2', [name, id])"
msgstr ""

<<<<<<< HEAD
#: s/python.md.tt2:17 s/ruby.md.tt2:18 s/scheme.md.tt2:18
msgid "-   Add some narrative.\n"
=======
#: s/python.md.tt2:17
#: s/ruby.md.tt2:18
#: s/scheme.md.tt2:18
msgid "-   Добавить больше материала.\n"
>>>>>>> 7d76472... Some more translation.
msgstr ""

#: s/ruby.md.tt2:1
msgid ""
"Ruby\n"
"===="
msgstr ""

#: s/ruby.md.tt2:4
<<<<<<< HEAD
msgid ""
"In Ruby on Rails using [ActiveRecord](http://guides.rubyonrails.org/"
"active_record_querying.html):"
=======
msgid "В Ruby on Rails используется шаблон [ActiveRecord](http://guides.rubyonrails.org/active_record_querying.html):"
>>>>>>> 7d76472... Some more translation.
msgstr ""

#: s/ruby.md.tt2:6
msgid "    Person.find :all, :conditions => ['id = ? or name = ?', id, name]"
msgstr ""

#: s/ruby.md.tt2:8
msgid "or"
msgstr ""

#: s/ruby.md.tt2:10
msgid "    Person.find_by_sql ['SELECT * from persons WHERE name = ?', name]"
msgstr ""

#: s/ruby.md.tt2:12
msgid ""
"\n"
<<<<<<< HEAD
"Using [Ruby/DBI](http://ruby-dbi.rubyforge.org/): analog to [Perl](./perl."
"html)."
=======
"Использование [Ruby/DBI](http://ruby-dbi.rubyforge.org/): аналог [Perl](./perl.html)."
>>>>>>> 7d76472... Some more translation.
msgstr ""

#: s/scheme.md.tt2:1
msgid ""
"Scheme\n"
"======"
msgstr ""

#: s/scheme.md.tt2:4
msgid ""
"CHICKEN Scheme\n"
"--------------"
msgstr ""

#: s/scheme.md.tt2:7
<<<<<<< HEAD
msgid ""
"[CHICKEN](http://www.call-with-current-continuation.org/) is a compiler for "
"[Scheme](http://schemers.org/)"
=======
msgid "[CHICKEN](http://www.call-with-current-continuation.org/) — это компилятор для языка [Scheme](http://schemers.org/)"
>>>>>>> 7d76472... Some more translation.
msgstr ""

#: s/scheme.md.tt2:9
msgid ""
"\n"
"    (define DB (sqlite3:open  \"myexample.db\"))\n"
"    (sqlite3:exec DB \"INSERT INTO Person(name) VALUES(?)\" \"Luke Skywalker"
"\")\n"
"    (sqlite3:for-each-row print DB \"SELECT id,name FROM Person WHERE id=?\" "
"3)\n"
"    (define adults (sqlite3:map-row DB \"SELECT name FROM Person WHERE age "
">= ?\" 18))"
msgstr ""

#: s/translations.md.tt2:1
msgid "# Translations"
msgstr ""

#: s/translations.md.tt2:3
msgid "The following natural languages are supported on bobby-tables.com:"
msgstr ""

#: s/translations.md.tt2:5
msgid ""
"* [English](http://bobby-tables.com/) (native)\n"
"* [German](http://bobby-tables.com/de_DE/) (fairly current)\n"
"* [Russian](http://bobby-tables.com/ru_RU/) (just starting)"
msgstr ""

#: s/translations.md.tt2:9
msgid ""
"We'd love to have translations into other languages as well.  Please contact "
"the [bobby-tables mailing list][1] and ask a team member about how you can "
"help."
msgstr ""

#: s/translations.md.tt2:11
msgid "# Contributing translations"
msgstr ""

#: s/translations.md.tt2:13
msgid "1. Run `make messages`."
msgstr ""

#: s/translations.md.tt2:15
msgid ""
"2. Skip this step if you just amend a translation. If you need to start a "
"new language, copy `share/locale/com.bobby-tables.pot` to `share/locale/"
"xx_YY/LC_MESSAGES/com.bobby-tables.po`, but substitute `xx` for the "
"appropriate [language code][2] and `YY` for the [territory code][3]. "
"(Alternatively to copying, use the command `msginit`.) Naming convention "
"examples:"
msgstr ""

#: s/translations.md.tt2:17
msgid ""
"        sv_SE.po    standard Swedish\n"
"        pt_BR.po    Brazilian Portuguese"
msgstr ""

#: s/translations.md.tt2:20
msgid ""
"3. Edit the PO file. [Lokalize (formerly KBabel)][Lokalize] is excellent, "
"[Poedit][Poedit] is good. Any text editor supporting UTF-8 can handle PO "
"files, but it will not be as convenient."
msgstr ""

#: s/translations.md.tt2:22
msgid "4. Run the normal `make` step."
msgstr ""

#: s/translations.md.tt2:24
msgid "# Guidelines for translations"
msgstr ""

#: s/translations.md.tt2:26
msgid ""
"* Become familiar with the source mark-up language [Markdown][Markdown] used "
"for producing the rendered HTML. The backtick (\\`) is an important piece of "
"syntax pertaining to translation, it indicates code, e.g. a variable name, "
"and code is not translated, i.e. copy the source text into the target "
"language as-is. Indented paragraphs are also code.  Translate only comments "
"in such code blocks."
msgstr ""

#: s/translations.md.tt2:28
msgid ""
"* To find out where a piece of English is from to see the context, run `ack -"
"a 'source text goes here'`. Most of the source text is in directory `s/`. "
"Run `make clean` first to avoid duplicates in build files. (If you don't "
"have [ack][ack] you can use `grep -R`."
msgstr ""

#: s/translations.md.tt2:30
msgid "* You can check your progress by running `make l10n-status`."
msgstr ""

#: s/translations.md.tt2:32
msgid "Apart from that, the normal rules for any translation apply:"
msgstr ""

#: s/translations.md.tt2:34
msgid ""
"* Don't translate literally or word-by-word, instead capture the essence of "
"each sentence/paragraph and reformulate it so it reads naturally. If you "
"have to merge or rearrange sentence parts, do it."
msgstr ""

#: s/translations.md.tt2:36
msgid ""
"* Avoid keeping key words/technical jargon in English, consult the standard "
"literature for existing translations of key words. (Software vendors such as "
"Microsoft and KDE publish shared translation tables, import those into your "
"PO editor, too.) In case you find no good translation, use your imagination "
"and put yourself into the position of a member of your potential audience: "
"is the sentence still understandable? If not, add a parenthetical remark to "
"the key word."
msgstr ""

#: s/translations.md.tt2:38
msgid ""
"* It can happen that source text is wrong in some way (typos, factual "
"errors). This should be improved first in a separate patch, independent from "
"your translation. Fix it yourself, and if not possible (e.g.  because the "
"English text is ambiguous), use `git annotate` to find out who wrote it and "
"ask for clarification."
msgstr ""

#: s/translations.md.tt2:40
msgid ""
"[1]: https://groups.google.com/forum/#!forum/bobby-tables\n"
"[2]: http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n"
"[3]: http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n"
"[ack]: http://betterthangrep.com/\n"
"[Markdown]: http://daringfireball.net/projects/markdown/\n"
"[Lokalize]: http://l10n.kde.org/tools/\n"
"[Poedit]: http://www.poedit.net/\n"
msgstr ""

#: tt/footer.tt:5
<<<<<<< HEAD
msgid ""
"This site's content is available under the <a href=\"https://creativecommons."
"org/licenses/by-sa/3.0/\">Creative Commons Attribution-ShareAlike 3.0 "
"License</a>"
=======
msgid "Содержимое этого сайта распространяется по лицензии <a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">Creative Commons Attribution-ShareAlike 3.0 License</a>"
>>>>>>> 7d76472... Some more translation.
msgstr ""

#: tt/footer.tt:8
msgid "Fork me on GitHub"
msgstr ""

#: tt/header.tt:6
msgid "Bobby Tables: Руководство по предотвращению SQL инъекций"
msgstr ""

#. (currlang)
#: tt/page.tt:6
msgid "bobby-tables.com: Руководство по предотвращению SQL инъекций, {currlang}"
msgstr ""

#: tt/page.tt:8
msgid "bobby-tables.com: Руководство по предотвращению SQL инъекций"
msgstr ""
