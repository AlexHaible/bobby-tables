h1. PHP

PHP is a little more disorganized than how "Perl handles parameters":./perl.html. The standard "MySQL extension":http://php.net/manual/en/book.mysql.php doesn't support parameterization, although the "PostgreSQL extension":http://www.php.net/manual/en/book.pgsql.php does:

<pre style="code">
$result = pg_query_params( $dbh, 'SELECT * FROM users WHERE email = $1', array($email) );
</pre>

Note that the query must be in single-quotes or have the @$@ escaped to avoid PHP trying to parse it as a variable.

*However*, you should probably be using an abstraction layer.  The "ODBC":http://php.net/manual/en/book.uodbc.php and "PDO":http://www.php.net/manual/en/book.pdo.php extensions both support parameterization and multiple databases:


h2. Using mysqli

The MySQL Improved extension handles bound parameters.

<pre style="code">
$stmt = $db->prepare('update people set name = ? where id = ?');
$stmt->bind_param('si',$name,$id);
$stmt->execute();
</pre>

h2. Using the ODBC layer

<pre style="code">
$stmt = odbc_prepare( $conn, 'SELECT * FROM users WHERE email = ?' );
$success = odbc_execute( $stmt, array($email) );
</pre>

Or:

<pre style="code">
$res = odbc_exec($conn, 'SELECT * FROM users WHERE email = ?', array($email));

$sth = $dbh->prepare('SELECT * FROM users WHERE email = :email');
$sth->execute(array(':email' => $email));
</pre>

h2. Using the PDO layer

Here's the long way to do bind parameters.

<pre style="code">
$dbh = new PDO('mysql:dbname=testdb;host=127.0.0.1', $user, $password);
$stmt = $dbh->prepare('INSERT INTO REGISTRY (name, value) VALUES (:name, :value)');
$stmt->bindParam(':name', $name);
$stmt->bindParam(':value', $value);

// insert one row
$name = 'one';
$value = 1;
$stmt->execute();
</pre>

And a shorter way to pass things in.

<pre style="code">
$dbh = new PDO('mysql:dbname=testdb;host=127.0.0.1', $user, $password);
$stmt = $dbh->prepare('UPDATE people SET name = :new_name WHERE id = :id');
$stmt->execute( array('new_name' => $name, 'id' => $id) );
</pre>
