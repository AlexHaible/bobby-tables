h1. Who is Bobby Tables?

<p>
<a href="http://xkcd.com/327/"><img src="img/xkcd.png" alt="xkcd Bobby Tables Cartoon" align="right" border="0"></a>
<a href="http://xkcd.com/327/">From the comic strip xkcd</a><br />
<b>School</b>: "Hi, this is your son's school.  We're having some computer trouble."<br />
<b>Mom</b>: "Oh, dear -- Did he break something?"<br />
<b>School</b>: "In a way.  Did you really name your son Robert'); DROP TABLE Students;-- ?"<br />
<b>Mom</b>: "Oh.  Yes.  Little Bobby Tables we call him."<br />
<b>School</b>: "Well, we've lost this year's student records.  I hope you're happy."<br />
<b>Mom</b>: "And I hope you've learned to sanitize your database inputs."<br />
(Alt-text: "Her daughter is named Help I'm trapped in a driver's license factory.")
</p>

h1. How to avoid Bobby Tables

There is only one way to avoid Bobby Tables attacks

* Do not create SQL statements that include outside data.
* Use parameterized SQL calls.

That's it. Don't try to escape invalid characters. Don't try to do
it yourself. Learn how to use parameterized statements. Always, every
single time.

The strip gets one thing crucially wrong.  The answer is
not to "sanitize your database inputs" yourself.  It is
prone to error.

h1. Examples

h2. C#

http://en.csharp-online.net/ASP.NET_Security_Hacks%E2%80%94Avoiding_SQL_Injection

<pre style="code">
SqlCommand userInfoQuery = new SqlCommand(
    "SELECT id, name, email FROM users WHERE id = @UserName", 
    someSqlConnection);

SqlParameter userNameParam = userInfoQuery.Parameters.Add("@UserName",
    SqlDbType.VarChar, 25 /* max length of field */ );

// userName is some string valued user input variable
userNameParam.Value = userName;
</pre>


h2. .NET

* http://msdn.microsoft.com/en-us/library/ms161953(loband).aspx
* http://blogs.msdn.com/tom/archive/2008/05/29/sql-injection-and-how-to-avoid-it.aspx

h2. ASP

<pre style="code">
objCmd.CommandType = adCmdText;
objCmd.CommandText = "UPDATE members SET photo = @filename WHERE memberID = @memberID";
objCmd.Parameters.Append(objCmd.CreateParameter("@memberID", adInteger, adParamInput, 4, memberid ));
objCmd.Parameters.Append(objCmd.CreateParameter("@filename", adVarChar, adParamInput, 510, fileName));
objCmd.Execute(adExecuteNoRecords);
gblDelobjParams(objCmd);
</pre>


h2. Python

Using the Python DB API, don't do this:

<pre style="code">
cmd = 'update people set name='%s' where id='%s'%(name, id)
curs.execute(cmd)
</pre>

        instead, do this:

<pre style="code">
curs.execute('update people set name=:1 where id=:2', [name, id])
</pre>


h2. ColdFusion

In ColdFusion there is a tag (function) called cfqueryparam that
should be used whenever writing inline queries...

<pre style="code">
&lt;cfquery datasource="#application.dsn#" name="qryTest" maxrows="#intRows#"&gt;
SELECT FirstName, LastName, Phone
FROM   tblUser
WHERE  Status =
    &lt;cfqueryparam cfsqltype="CF_SQL_VARCHAR" value="#form.status#"&gt;
    &lt;/cfqueryparam&gt;
&lt;/cfquery&gt;
</pre>


Naturally you can also call paramaterized stored procedures using the
@cfstoredproc@ and @cfprocparam@ tags.

h2. Delphi


To use a prepared statement do something like this:

<pre>
query.SQL.Text := 'update people set name=:Name where id=:ID';
query.Prepare;
query.ParamByName( 'Name' ).AsString := name;
query.ParamByName( 'ID' ).AsInteger := id;
query.ExecSQL;
</pre>


h2. Ruby


In Ruby on Rails (ActiveRecord):

<pre>
Person.find :all, :conditions =&gt; ['id = ? or name = ?', id, name]
</pre>


Or, if you have to build your own SQL statement (which you should avoid if possible):

<pre>
Person.find_by_sql "SELECT * from persons WHERE name = #{ Person.quote_value name}"
</pre>


h1. Other random resources

* http://www.schneier.com/blog/archives/2008/10/how_to_write_in.html
* http://st-curriculum.oracle.com/tutorial/SQLInjection/


h1. Patches welcome

Please let me know if you have updates or additions.  Email me,
Andy Lester, at andy at petdance.com.
